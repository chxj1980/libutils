!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
ALIGN_INT	utils/_common.h	58;"	d
ALIGN_PTR	utils/_common.h	55;"	d
BUFFER_FROM_MALLOC	utils/_buffer.h	24;"	d
BUFFER_FROM_MEM_POOL	utils/_buffer.h	23;"	d
BUFFER_TYPE_FILE	utils/_buffer.h	27;"	d
BUFFER_TYPE_MEMORY	utils/_buffer.h	26;"	d
BYTE	crypt/3des.h	12;"	d
BYTE_ORDER	conhash/md5.c	57;"	d	file:
BYTE_ORDER	conhash/md5.c	59;"	d	file:
BYTE_ORDER	conhash/md5.c	61;"	d	file:
BYTE_ORDER	crypt/md5.c	57;"	d	file:
BYTE_ORDER	crypt/md5.c	59;"	d	file:
BYTE_ORDER	crypt/md5.c	61;"	d	file:
CC	Makefile	/^CC           = gcc$/;"	m
CC	lua/Makefile	/^CC      = gcc$/;"	m
CC	t/Makefile	/^CC           = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS       = -g -W -Wall -Werror -Wno-unused-parameter -Wunused-function \\$/;"	m
CFLAGS	lua/Makefile	/^CFLAGS  = -g -W -Wall -Wno-unused-parameter -Wunused-function \\$/;"	m
CFLAGS	t/Makefile	/^CFLAGS       = -g -W -Wall -Wno-unused-parameter -Wunused-function \\$/;"	m
CONHASH_API	conhash/conhash.h	14;"	d
CONHASH_API	conhash/conhash.h	16;"	d
CONHASH_API	conhash/conhash.h	20;"	d
CONHASH_OBJS	Makefile	/^CONHASH_OBJS = $(OBJS_DIR)\/conhash.o       \\$/;"	m
CRYPT_OBJS	Makefile	/^CRYPT_OBJS	 = $(OBJS_DIR)\/3des.o \\$/;"	m
DES_FP	crypt/3des.c	236;"	d	file:
DES_IP	crypt/3des.c	223;"	d	file:
DES_ROUND	crypt/3des.c	249;"	d	file:
EXES	t/Makefile	/^EXES         = $(patsubst %.c,%,  $(SRCS))$/;"	m
F	conhash/md5.c	202;"	d	file:
F	crypt/md5.c	202;"	d	file:
G	conhash/md5.c	228;"	d	file:
G	crypt/md5.c	228;"	d	file:
GET_UINT32	crypt/3des.c	205;"	d	file:
GH_COPYKEYS	hashmap/hashmap.h	52;"	d
GH_USERKEYS	hashmap/hashmap.h	53;"	d
H	conhash/md5.c	254;"	d	file:
H	crypt/md5.c	254;"	d	file:
HASHMAP_ERR	hashmap/hashmap.h	45;"	d
HASHMAP_INTABLE	hashmap/hashmap.h	47;"	d
HASHMAP_NOMEM	hashmap/hashmap.h	44;"	d
HASHMAP_OBJS	Makefile	/^HASHMAP_OBJS = $(OBJS_DIR)\/hash_fcn.o      \\$/;"	m
HASHMAP_OK	hashmap/hashmap.h	46;"	d
I	conhash/md5.c	280;"	d	file:
I	crypt/md5.c	280;"	d	file:
INIT_QUEUE_SIZE	utils/_queue.h	24;"	d
IP_ZONE_OBJS	Makefile	/^IP_ZONE_OBJS = $(OBJS_DIR)\/ip_zone.o$/;"	m
LHs	crypt/3des.c	/^static uint32 LHs[16] =$/;"	v	file:
LIB	lua/Makefile	/^LIB		= -lutils$/;"	m
LIBS	Makefile	/^LIBS         = -lpthread -llua -ldl -lm$/;"	m
LIBS	t/Makefile	/^LIBS         = -lutils$/;"	m
LOG_DESTINATION_CONSOLE	utils/_log.c	20;"	d	file:
LOG_DESTINATION_FILE	utils/_log.c	21;"	d	file:
LOG_DESTINATION_SYSLOG	utils/_log.c	22;"	d	file:
LOG_LEVEL_DEBUG	utils/_log.h	23;"	d
LOG_LEVEL_ERROR	utils/_log.h	26;"	d
LOG_LEVEL_INFO	utils/_log.h	24;"	d
LOG_LEVEL_WARN	utils/_log.h	25;"	d
MAIN_EXE	Makefile	/^MAIN_EXE   = main$/;"	m
MAIN_LIBS	Makefile	/^MAIN_LIBS    = $(LIBS) -llua -ldl -lm$/;"	m
MALLOC_WRAPPER	utils/_memory.h	23;"	d
MALLOC_WRAPPER	utils/_memory.h	25;"	d
MAX_FAILED_COUNT	utils/_mem_pool.h	31;"	d
MAX_QUEUE_SIZE	utils/_queue.h	25;"	d
MAX_SUBNET_SIZE	ip_zone/ip_zone.h	24;"	d
MAX_ZONE_NAME_SIZE	ip_zone/ip_zone.h	23;"	d
NETWORK_OBJS	Makefile	/^NETWORK_OBJS = $(OBJS_DIR)\/udp.o          \\$/;"	m
NODE_FLAG_IN	conhash/conhash.h	24;"	d
NODE_FLAG_INIT	conhash/conhash.h	23;"	d
NODE_S	conhash/conhash.h	/^}NODE_S;$/;"	t	typeref:struct:node_s
OBJS	Makefile	/^OBJS         = $(UTIL_OBJS)           \\$/;"	m
OBJS	lua/Makefile	/^OBJS    = utils_lua.o $/;"	m
OBJS_DIR	Makefile	/^OBJS_DIR     = objs$/;"	m
OBJS_DIR	t/Makefile	/^OBJS_DIR     = objs$/;"	m
PLATFORM_ALIGNMENT	utils/_mem_pool.h	32;"	d
PUT_UINT32	crypt/3des.c	213;"	d	file:
RBTREE_OBJS	Makefile	/^RBTREE_OBJS  = $(OBJS_DIR)\/rbtree.o$/;"	m
RB_BLACK	rbtree/rbtree.h	117;"	d
RB_CLEAR_NODE	rbtree/rbtree.h	150;"	d
RB_EMPTY_NODE	rbtree/rbtree.h	149;"	d
RB_EMPTY_ROOT	rbtree/rbtree.h	148;"	d
RB_RED	rbtree/rbtree.h	116;"	d
RB_ROOT	rbtree/rbtree.h	145;"	d
RHs	crypt/3des.c	/^static uint32 RHs[16] =$/;"	v	file:
ROTATE_LEFT	conhash/md5.c	197;"	d	file:
ROTATE_LEFT	crypt/md5.c	197;"	d	file:
SB1	crypt/3des.c	/^uint32 SB1[64] =$/;"	v
SB2	crypt/3des.c	/^static uint32 SB2[64] =$/;"	v	file:
SB3	crypt/3des.c	/^static uint32 SB3[64] =$/;"	v	file:
SB4	crypt/3des.c	/^static uint32 SB4[64] =$/;"	v	file:
SB5	crypt/3des.c	/^static uint32 SB5[64] =$/;"	v	file:
SB6	crypt/3des.c	/^static uint32 SB6[64] =$/;"	v	file:
SB7	crypt/3des.c	/^static uint32 SB7[64] =$/;"	v	file:
SB8	crypt/3des.c	/^static uint32 SB8[64] =$/;"	v	file:
SERVER_CONHASH_OBJS	Makefile	/^SERVER_CONHASH_OBJS = $(OBJS_DIR)\/server_conhash.o$/;"	m
SET	conhash/md5.c	203;"	d	file:
SET	conhash/md5.c	223;"	d	file:
SET	conhash/md5.c	229;"	d	file:
SET	conhash/md5.c	249;"	d	file:
SET	conhash/md5.c	255;"	d	file:
SET	conhash/md5.c	275;"	d	file:
SET	conhash/md5.c	281;"	d	file:
SET	conhash/md5.c	301;"	d	file:
SET	crypt/md5.c	203;"	d	file:
SET	crypt/md5.c	223;"	d	file:
SET	crypt/md5.c	229;"	d	file:
SET	crypt/md5.c	249;"	d	file:
SET	crypt/md5.c	255;"	d	file:
SET	crypt/md5.c	275;"	d	file:
SET	crypt/md5.c	281;"	d	file:
SET	crypt/md5.c	301;"	d	file:
SRCS	t/Makefile	/^SRCS         = $(wildcard *.c .\/sub\/*.c) $/;"	m
STATIC_LIB	Makefile	/^STATIC_LIB = libutils.a$/;"	m
SYSLOG_ALERT	utils/_syslog.h	23;"	d
SYSLOG_AUTH	utils/_syslog.h	43;"	d
SYSLOG_AUTHPRIV	utils/_syslog.h	49;"	d
SYSLOG_CRIT	utils/_syslog.h	24;"	d
SYSLOG_CRON	utils/_syslog.h	48;"	d
SYSLOG_DAEMON	utils/_syslog.h	42;"	d
SYSLOG_DEBUG	utils/_syslog.h	29;"	d
SYSLOG_EMERG	utils/_syslog.h	22;"	d
SYSLOG_ERR	utils/_syslog.h	25;"	d
SYSLOG_FTP	utils/_syslog.h	50;"	d
SYSLOG_INFO	utils/_syslog.h	28;"	d
SYSLOG_INTERNAL_MARK	utils/_syslog.h	35;"	d
SYSLOG_INTERNAL_NOPRI	utils/_syslog.h	33;"	d
SYSLOG_KERN	utils/_syslog.h	39;"	d
SYSLOG_LOCAL0	utils/_syslog.h	52;"	d
SYSLOG_LOCAL1	utils/_syslog.h	53;"	d
SYSLOG_LOCAL2	utils/_syslog.h	54;"	d
SYSLOG_LOCAL3	utils/_syslog.h	55;"	d
SYSLOG_LOCAL4	utils/_syslog.h	56;"	d
SYSLOG_LOCAL5	utils/_syslog.h	57;"	d
SYSLOG_LOCAL6	utils/_syslog.h	58;"	d
SYSLOG_LOCAL7	utils/_syslog.h	59;"	d
SYSLOG_LPR	utils/_syslog.h	45;"	d
SYSLOG_MAIL	utils/_syslog.h	41;"	d
SYSLOG_MAKEPRI	utils/_syslog.h	31;"	d
SYSLOG_NEWS	utils/_syslog.h	46;"	d
SYSLOG_NFACILITIES	utils/_syslog.h	61;"	d
SYSLOG_NOTICE	utils/_syslog.h	27;"	d
SYSLOG_SYSLOG	utils/_syslog.h	44;"	d
SYSLOG_USER	utils/_syslog.h	40;"	d
SYSLOG_UUCP	utils/_syslog.h	47;"	d
SYSLOG_WARNING	utils/_syslog.h	26;"	d
T1	conhash/md5.c	65;"	d	file:
T1	crypt/md5.c	65;"	d	file:
T10	conhash/md5.c	74;"	d	file:
T10	crypt/md5.c	74;"	d	file:
T11	conhash/md5.c	75;"	d	file:
T11	crypt/md5.c	75;"	d	file:
T12	conhash/md5.c	76;"	d	file:
T12	crypt/md5.c	76;"	d	file:
T13	conhash/md5.c	77;"	d	file:
T13	crypt/md5.c	77;"	d	file:
T14	conhash/md5.c	78;"	d	file:
T14	crypt/md5.c	78;"	d	file:
T15	conhash/md5.c	79;"	d	file:
T15	crypt/md5.c	79;"	d	file:
T16	conhash/md5.c	80;"	d	file:
T16	crypt/md5.c	80;"	d	file:
T17	conhash/md5.c	81;"	d	file:
T17	crypt/md5.c	81;"	d	file:
T18	conhash/md5.c	82;"	d	file:
T18	crypt/md5.c	82;"	d	file:
T19	conhash/md5.c	83;"	d	file:
T19	crypt/md5.c	83;"	d	file:
T2	conhash/md5.c	66;"	d	file:
T2	crypt/md5.c	66;"	d	file:
T20	conhash/md5.c	84;"	d	file:
T20	crypt/md5.c	84;"	d	file:
T21	conhash/md5.c	85;"	d	file:
T21	crypt/md5.c	85;"	d	file:
T22	conhash/md5.c	86;"	d	file:
T22	crypt/md5.c	86;"	d	file:
T23	conhash/md5.c	87;"	d	file:
T23	crypt/md5.c	87;"	d	file:
T24	conhash/md5.c	88;"	d	file:
T24	crypt/md5.c	88;"	d	file:
T25	conhash/md5.c	89;"	d	file:
T25	crypt/md5.c	89;"	d	file:
T26	conhash/md5.c	90;"	d	file:
T26	crypt/md5.c	90;"	d	file:
T27	conhash/md5.c	91;"	d	file:
T27	crypt/md5.c	91;"	d	file:
T28	conhash/md5.c	92;"	d	file:
T28	crypt/md5.c	92;"	d	file:
T29	conhash/md5.c	93;"	d	file:
T29	crypt/md5.c	93;"	d	file:
T3	conhash/md5.c	67;"	d	file:
T3	crypt/md5.c	67;"	d	file:
T30	conhash/md5.c	94;"	d	file:
T30	crypt/md5.c	94;"	d	file:
T31	conhash/md5.c	95;"	d	file:
T31	crypt/md5.c	95;"	d	file:
T32	conhash/md5.c	96;"	d	file:
T32	crypt/md5.c	96;"	d	file:
T33	conhash/md5.c	97;"	d	file:
T33	crypt/md5.c	97;"	d	file:
T34	conhash/md5.c	98;"	d	file:
T34	crypt/md5.c	98;"	d	file:
T35	conhash/md5.c	99;"	d	file:
T35	crypt/md5.c	99;"	d	file:
T36	conhash/md5.c	100;"	d	file:
T36	crypt/md5.c	100;"	d	file:
T37	conhash/md5.c	101;"	d	file:
T37	crypt/md5.c	101;"	d	file:
T38	conhash/md5.c	102;"	d	file:
T38	crypt/md5.c	102;"	d	file:
T39	conhash/md5.c	103;"	d	file:
T39	crypt/md5.c	103;"	d	file:
T4	conhash/md5.c	68;"	d	file:
T4	crypt/md5.c	68;"	d	file:
T40	conhash/md5.c	104;"	d	file:
T40	crypt/md5.c	104;"	d	file:
T41	conhash/md5.c	105;"	d	file:
T41	crypt/md5.c	105;"	d	file:
T42	conhash/md5.c	106;"	d	file:
T42	crypt/md5.c	106;"	d	file:
T43	conhash/md5.c	107;"	d	file:
T43	crypt/md5.c	107;"	d	file:
T44	conhash/md5.c	108;"	d	file:
T44	crypt/md5.c	108;"	d	file:
T45	conhash/md5.c	109;"	d	file:
T45	crypt/md5.c	109;"	d	file:
T46	conhash/md5.c	110;"	d	file:
T46	crypt/md5.c	110;"	d	file:
T47	conhash/md5.c	111;"	d	file:
T47	crypt/md5.c	111;"	d	file:
T48	conhash/md5.c	112;"	d	file:
T48	crypt/md5.c	112;"	d	file:
T49	conhash/md5.c	113;"	d	file:
T49	crypt/md5.c	113;"	d	file:
T5	conhash/md5.c	69;"	d	file:
T5	crypt/md5.c	69;"	d	file:
T50	conhash/md5.c	114;"	d	file:
T50	crypt/md5.c	114;"	d	file:
T51	conhash/md5.c	115;"	d	file:
T51	crypt/md5.c	115;"	d	file:
T52	conhash/md5.c	116;"	d	file:
T52	crypt/md5.c	116;"	d	file:
T53	conhash/md5.c	117;"	d	file:
T53	crypt/md5.c	117;"	d	file:
T54	conhash/md5.c	118;"	d	file:
T54	crypt/md5.c	118;"	d	file:
T55	conhash/md5.c	119;"	d	file:
T55	crypt/md5.c	119;"	d	file:
T56	conhash/md5.c	120;"	d	file:
T56	crypt/md5.c	120;"	d	file:
T57	conhash/md5.c	121;"	d	file:
T57	crypt/md5.c	121;"	d	file:
T58	conhash/md5.c	122;"	d	file:
T58	crypt/md5.c	122;"	d	file:
T59	conhash/md5.c	123;"	d	file:
T59	crypt/md5.c	123;"	d	file:
T6	conhash/md5.c	70;"	d	file:
T6	crypt/md5.c	70;"	d	file:
T60	conhash/md5.c	124;"	d	file:
T60	crypt/md5.c	124;"	d	file:
T61	conhash/md5.c	125;"	d	file:
T61	crypt/md5.c	125;"	d	file:
T62	conhash/md5.c	126;"	d	file:
T62	crypt/md5.c	126;"	d	file:
T63	conhash/md5.c	127;"	d	file:
T63	crypt/md5.c	127;"	d	file:
T64	conhash/md5.c	128;"	d	file:
T64	crypt/md5.c	128;"	d	file:
T7	conhash/md5.c	71;"	d	file:
T7	crypt/md5.c	71;"	d	file:
T8	conhash/md5.c	72;"	d	file:
T8	crypt/md5.c	72;"	d	file:
T9	conhash/md5.c	73;"	d	file:
T9	crypt/md5.c	73;"	d	file:
TCP_CLIENT_ERROR	network/tcp_client.h	24;"	d
TCP_CLIENT_OK	network/tcp_client.h	23;"	d
TCP_EPOLL_TIMEOUT	network/tcp_client.h	27;"	d
TCP_EPOLL_TIMEOUT	network/tcp_server.h	27;"	d
TCP_MAX_CONNECT_NUM	network/tcp_client.h	30;"	d
TCP_MAX_CONNECT_NUM	network/tcp_server.h	30;"	d
TCP_MAX_IDLE_TIME	network/tcp_client.h	28;"	d
TCP_MAX_IDLE_TIME	network/tcp_server.h	28;"	d
TCP_MAX_LISTEN_NUM	network/tcp_client.h	26;"	d
TCP_MAX_LISTEN_NUM	network/tcp_server.h	26;"	d
TCP_MAX_STREAM_NUM	network/tcp_client.h	29;"	d
TCP_MAX_STREAM_NUM	network/tcp_server.h	29;"	d
TCP_SERVER_ERROR	network/tcp_server.h	24;"	d
TCP_SERVER_OK	network/tcp_server.h	23;"	d
TCP_STATE_CONNECTED	network/tcp_client.h	34;"	d
TCP_STATE_CONNECTING	network/tcp_client.h	33;"	d
TCP_STATE_NONE	network/tcp_client.h	32;"	d
THREAD_ID	utils/_thread_pool.h	25;"	d
THREAD_POOL_DATA	utils/_thread_pool.h	23;"	d
THREAD_POOL_QUEUE	utils/_thread_pool.h	24;"	d
T_MASK	conhash/md5.c	64;"	d	file:
T_MASK	crypt/md5.c	64;"	d	file:
UNIX_DOMAIN_PATH	t/unix_socket_udp_client.c	20;"	d	file:
UNIX_DOMAIN_PATH	t/unix_socket_udp_server.c	20;"	d	file:
UNIX_DOMAIN_SERVER_PATH	t/unix_socket_udp_client.c	21;"	d	file:
UTIL_OBJS	Makefile	/^UTIL_OBJS    = $(OBJS_DIR)\/_log.o          \\$/;"	m
_BUFFER_H_	utils/_buffer.h	19;"	d
_COMMON_H_	utils/_common.h	19;"	d
_HASHMAP_	hashmap/hashmap.h	33;"	d
_HASH_FCN_	hashmap/hash_fcn.h	26;"	d
_IP_ZONE_H_	ip_zone/ip_zone.h	19;"	d
_LINUX_RBTREE_H	rbtree/rbtree.h	95;"	d
_LOG_H_	utils/_log.h	19;"	d
_MEMORY_H_	utils/_memory.h	19;"	d
_MEM_POOL_H_	utils/_mem_pool.h	28;"	d
_NETWORK_H_	utils/_network.h	19;"	d
_NETWORK_UTIL_H_	network/network_util.h	19;"	d
_NULL	conhash/util_rbtree.c	7;"	d	file:
_PRIME_TABLE_	hashmap/prime_table.h	23;"	d
_PROPERTY_H_	utils/_property.h	2;"	d
_QUEUE_H_	utils/_queue.h	20;"	d
_SEMAPHORE_H_	utils/_process_lock.h	19;"	d
_SERVER_CONHASH_H_	server_conhash/server_conhash.h	19;"	d
_SHM_H_	utils/_shm.h	19;"	d
_STRING_H_	utils/_string.h	19;"	d
_SYSLOG_H_	utils/_syslog.h	19;"	d
_TCP_CLIENT_H_	network/tcp_client.h	19;"	d
_TCP_SERVER_H_	network/tcp_server.h	19;"	d
_THREAD_POOL_H_	utils/_thread_pool.h	19;"	d
_TIME_H_	utils/_time.h	19;"	d
_UDP_H_	network/udp.h	19;"	d
_UTILS_H_	utils/_other.h	19;"	d
_UTIL_H_	utils/utils.h	19;"	d
_XOPEN_SOURCE	utils/_common.h	53;"	d
__CONFIGURE_H_	conhash/configure.h	5;"	d
__CONHASH_INTER_H_	conhash/conhash_inter.h	5;"	d
__CON_HASH_H_	conhash/conhash.h	5;"	d
__UTIL_RLTREE_H_	conhash/util_rbtree.h	5;"	d
__buf	utils/_process_lock.c	/^    struct seminfo *__buf;      \/*  buffer for IPC_INFO *\/   \/\/test!!$/;"	m	union:semun	typeref:struct:semun::seminfo	file:
__conhash_add_replicas	conhash/conhash_inter.c	/^void __conhash_add_replicas(struct conhash_s *conhash, struct node_s *node)$/;"	f
__conhash_del_rbnode	conhash/conhash_inter.c	/^void __conhash_del_rbnode(util_rbtree_node_t *rbnode)$/;"	f
__conhash_del_replicas	conhash/conhash_inter.c	/^void __conhash_del_replicas(struct conhash_s *conhash, struct node_s *node)$/;"	f
__conhash_get_rbnode	conhash/conhash_inter.c	/^util_rbtree_node_t *__conhash_get_rbnode(struct node_s *node, long hash)$/;"	f
__conhash_hash_def	conhash/conhash_inter.c	/^long __conhash_hash_def(const char *instr,int len)$/;"	f
__conhash_node2string	conhash/conhash_inter.c	/^void __conhash_node2string(const struct node_s *node, u_int replica_idx, char buf[128], u_int *len)$/;"	f
__get_vnodes	conhash/conhash_util.c	/^static void __get_vnodes(util_rbtree_node_t *node, void *data)$/;"	f	file:
__get_vnodes_s	conhash/conhash_inter.h	/^struct __get_vnodes_s$/;"	s
__pad	utils/_process_lock.c	/^    void *__pad;$/;"	m	union:semun	file:
__rb_erase_color	rbtree/rbtree.c	/^static void __rb_erase_color(struct rb_node *node, struct rb_node *parent,$/;"	f	file:
__rb_rotate_left	rbtree/rbtree.c	/^static void __rb_rotate_left(struct rb_node *node, struct rb_root *root)$/;"	f	file:
__rb_rotate_right	rbtree/rbtree.c	/^static void __rb_rotate_right(struct rb_node *node, struct rb_root *root)$/;"	f	file:
_buffer_chain_t	utils/_buffer.h	/^typedef struct _buffer_chain_t {$/;"	s
_buffer_t	utils/_buffer.h	/^typedef struct _buffer_t {$/;"	s
_comment_char	utils/_property.c	/^static char _comment_char = '#';$/;"	v	file:
_hash_fcn_t	hashmap/hash_fcn.h	/^typedef struct _hash_fcn_t {$/;"	s
_hashmap_node_t	hashmap/hashmap.h	/^typedef struct _hashmap_node_t{$/;"	s
_hashmap_t	hashmap/hashmap.h	/^typedef struct _hashmap_t{$/;"	s
_ip_zone_t	ip_zone/ip_zone.h	/^typedef struct _ip_zone_t {$/;"	s
_ip_zones_t	ip_zone/ip_zone.h	/^typedef struct _ip_zones_t {$/;"	s
_mem_page_t	utils/_mem_pool.h	/^typedef struct _mem_page_t{$/;"	s
_mem_pool_t	utils/_mem_pool.h	/^typedef struct _mem_pool_t {$/;"	s
_process_lock_t	utils/_process_lock.h	/^typedef struct _process_lock_t {$/;"	s
_queue_t	utils/_queue.h	/^typedef struct _queue_t{$/;"	s
_server_conhash_t	server_conhash/server_conhash.h	/^typedef struct _server_conhash_t {$/;"	s
_shm_t	utils/_shm.h	/^typedef struct _shm_t {$/;"	s
_string_t	utils/_string.h	/^typedef struct _string_t {$/;"	s
_syslog_code_t	utils/_syslog.h	/^typedef struct _syslog_code_t{$/;"	s
_tcp_client_stream_t	network/tcp_client.h	/^struct _tcp_client_stream_t {$/;"	s
_tcp_client_t	network/tcp_client.h	/^struct _tcp_client_t {$/;"	s
_tcp_server_stream_t	network/tcp_server.h	/^struct _tcp_server_stream_t {$/;"	s
_tcp_server_t	network/tcp_server.h	/^struct _tcp_server_t {$/;"	s
_thread_context_t	utils/_thread_pool.h	/^struct _thread_context_t {$/;"	s
_thread_pool_t	utils/_thread_pool.h	/^struct _thread_pool_t {$/;"	s
abcd	conhash/md5.h	/^    md5_word_t abcd[4];		\/* digest buffer *\/$/;"	m	struct:md5_state_s
abcd	crypt/md5.h	/^    md5_word_t abcd[4];		\/* digest buffer *\/$/;"	m	struct:md5_state_s
accept_cb	network/tcp_server.c	/^static int accept_cb(tcp_server_stream_t *listen_stream)$/;"	f	file:
active_stream_num	network/tcp_client.h	/^    int           active_stream_num;          \/* 当前活跃的stream数量 *\/$/;"	m	struct:_tcp_client_t
active_stream_num	network/tcp_server.h	/^    int           active_stream_num;            \/* 当前活跃的stream数量 *\/$/;"	m	struct:_tcp_server_t
add_stream_into_busy_list	network/tcp_client.c	/^static void add_stream_into_busy_list(tcp_client_t *client, tcp_client_stream_t *stream)$/;"	f	file:
add_stream_into_busy_list	network/tcp_server.c	/^static void add_stream_into_busy_list(tcp_server_t *server, tcp_server_stream_t *stream)$/;"	f	file:
add_stream_into_idle_list	network/tcp_client.c	/^static void add_stream_into_idle_list(tcp_client_t *client, tcp_client_stream_t *stream)$/;"	f	file:
add_stream_into_idle_list	network/tcp_server.c	/^static void add_stream_into_idle_list(tcp_server_t *server, tcp_server_stream_t *stream)$/;"	f	file:
array	utils/_process_lock.c	/^    unsigned short *array;      \/*  array for GETALL & SETALL *\/$/;"	m	union:semun	file:
base	utils/_shm.h	/^    void  *base;$/;"	m	struct:_shm_t
buf	conhash/md5.h	/^    md5_byte_t buf[64];		\/* accumulate block *\/$/;"	m	struct:md5_state_s
buf	crypt/md5.h	/^    md5_byte_t buf[64];		\/* accumulate block *\/$/;"	m	struct:md5_state_s
buf	utils/_process_lock.c	/^    struct semid_ds *buf;       \/*  buffer for IPC_STAT & IPC_SET *\/$/;"	m	union:semun	typeref:struct:semun::semid_ds	file:
buffer	utils/_buffer.h	/^    buffer_t *buffer; $/;"	m	struct:_buffer_chain_t
buffer_chain_t	utils/_buffer.h	/^} buffer_chain_t;$/;"	t	typeref:struct:_buffer_chain_t
buffer_enlarge	utils/_buffer.c	/^static int buffer_enlarge(buffer_t *buffer, int dst_size)$/;"	f	file:
buffer_eof	utils/_buffer.c	/^int buffer_eof(buffer_t *buffer)$/;"	f
buffer_read	utils/_buffer.c	/^int buffer_read(buffer_t *buffer, char *buf, int buf_size)$/;"	f
buffer_read_line	utils/_buffer.c	/^int buffer_read_line(buffer_t *buffer, char *buf, int buf_size)$/;"	f
buffer_t	utils/_buffer.h	/^} buffer_t;$/;"	t	typeref:struct:_buffer_t
buffer_write	utils/_buffer.c	/^int buffer_write(buffer_t *buffer, char *buf, int size)$/;"	f
busy_stream_head	network/tcp_client.h	/^    tcp_client_stream_t *busy_stream_head;    \/* busy stream链表头 *\/$/;"	m	struct:_tcp_client_t
busy_stream_head	network/tcp_server.h	/^    tcp_server_stream_t *busy_stream_head;      \/* busy stream链表头 *\/$/;"	m	struct:_tcp_server_t
busy_stream_num	network/tcp_client.h	/^    int                  busy_stream_num;     \/* busy stream的数量 *\/$/;"	m	struct:_tcp_client_t
busy_stream_num	network/tcp_server.h	/^    int           busy_stream_num;              \/* busy stream的数量 *\/$/;"	m	struct:_tcp_server_t
busy_stream_tail	network/tcp_client.h	/^    tcp_client_stream_t *busy_stream_tail;    \/* busy stream链表尾 *\/$/;"	m	struct:_tcp_client_t
busy_stream_tail	network/tcp_server.h	/^    tcp_server_stream_t *busy_stream_tail;      \/* busy stream链表尾 *\/$/;"	m	struct:_tcp_server_t
cal_crc	conhash/crc32.c	/^unsigned int cal_crc(unsigned char *ptr,  unsigned char len) { $/;"	f
cb_hashfunc	conhash/conhash_inter.h	/^	long (*cb_hashfunc)(const char *,int len);$/;"	m	struct:conhash_s
chain	network/tcp_client.h	/^    buffer_chain_t      *chain;               \/* 需要发送的数据链 *\/$/;"	m	struct:_tcp_client_stream_t
chain	network/tcp_server.h	/^    buffer_chain_t *chain;                      \/* 需要发送的数据链 *\/$/;"	m	struct:_tcp_server_stream_t
char_at	utils/_string.c	/^int char_at(char *str, char c){$/;"	f
client	network/tcp_client.h	/^    tcp_client_t        *client;              \/* 指向tcp client *\/$/;"	m	struct:_tcp_client_stream_t
client	t/tcp_client_test.c	/^static tcp_client_t *client = NULL;$/;"	v	file:
close	network/tcp_client.h	/^    int                  close;               \/* 是否要关闭连接 *\/$/;"	m	struct:_tcp_client_stream_t
close	network/tcp_server.h	/^    int             close;                      \/* 是否要关闭连接 *\/$/;"	m	struct:_tcp_server_stream_t
cnode	hashmap/hashmap.h	/^  hashmap_node_t *cnode; \/\/ findfirst\/next node ptr$/;"	m	struct:_hashmap_t
color	conhash/util_rbtree.h	/^    int color;$/;"	m	struct:util_rbtree_node_s
conhash_add_node	conhash/conhash.c	/^int conhash_add_node(struct conhash_s *conhash, struct node_s *node)$/;"	f
conhash_cb_hashfunc	conhash/conhash.h	/^typedef long (*conhash_cb_hashfunc)(const char *instr,int len);$/;"	t
conhash_del_node	conhash/conhash.c	/^int conhash_del_node(struct conhash_s *conhash, struct node_s *node)$/;"	f
conhash_fini	conhash/conhash.c	/^void conhash_fini(struct conhash_s *conhash)$/;"	f
conhash_get_vnodes	conhash/conhash_util.c	/^void conhash_get_vnodes(struct conhash_s *conhash, long *values, int size)$/;"	f
conhash_get_vnodes_num	conhash/conhash_util.c	/^u_int conhash_get_vnodes_num(const struct conhash_s *conhash)$/;"	f
conhash_init	conhash/conhash.c	/^struct conhash_s* conhash_init(conhash_cb_hashfunc pfhash)$/;"	f
conhash_lookup	conhash/conhash.c	/^const struct node_s* conhash_lookup(struct conhash_s *conhash, const char *object,int len)$/;"	f
conhash_md5_digest	conhash/conhash_util.c	/^void conhash_md5_digest(const u_char *instr,int len, u_char digest[16])$/;"	f
conhash_s	conhash/conhash_inter.h	/^struct conhash_s$/;"	s
conhash_set_node	conhash/conhash.c	/^void conhash_set_node(struct node_s *node, int index, const char *iden, u_int replica)$/;"	f
conhashs	server_conhash/server_conhash.h	/^    hashmap_t *conhashs; \/* IDC一致性哈希实例哈希表 *\/$/;"	m	struct:_server_conhash_t
conn_cb	network/tcp_client.h	/^    tcp_client_conn_cb_t conn_cb;             \/* 连接回调函数 *\/$/;"	m	struct:_tcp_client_stream_t
container_of	rbtree/rbtree.h	109;"	d
count	conhash/md5.h	/^    md5_word_t count[2];	\/* message length in bits, lsw first *\/$/;"	m	struct:md5_state_s
count	crypt/md5.h	/^    md5_word_t count[2];	\/* message length in bits, lsw first *\/$/;"	m	struct:md5_state_s
count	hashmap/hashmap.h	/^  unsigned         count;  \/* total # nodes in table *\/$/;"	m	struct:_hashmap_t
count	ip_zone/ip_zone.h	/^    unsigned int count; $/;"	m	struct:_ip_zones_t
create_dir	utils/_other.c	/^int create_dir(char *path_name){$/;"	f
create_file	utils/_other.c	/^int create_file(char *file_name, size_t size)$/;"	f
create_file_if_not_existed	utils/_other.c	/^int create_file_if_not_existed(char *file_name)$/;"	f
create_random	utils/_other.c	/^int create_random(int max){$/;"	f
crow	hashmap/hashmap.h	/^  int             crow;    \/\/ findfirst\/next row in table$/;"	m	struct:_hashmap_t
cur	conhash/conhash_inter.h	/^    long size, cur;$/;"	m	struct:__get_vnodes_s
cur_chain	network/tcp_client.h	/^    buffer_chain_t      *cur_chain;           \/* 需要发送数据链当前发送节点 *\/$/;"	m	struct:_tcp_client_stream_t
current	utils/_mem_pool.h	/^    mem_page_t *current;           \/* 当前正在使用的page *\/$/;"	m	struct:_mem_pool_t
data	conhash/util_rbtree.h	/^	void *data;$/;"	m	struct:util_rbtree_node_s
data	hashmap/hashmap.h	/^  void *data;  \/* Pointer to the users data, this is never copied! *\/$/;"	m	struct:_hashmap_node_t
data	network/tcp_client.h	/^    void                *data;                \/* 每一个连接的私有数据 *\/$/;"	m	struct:_tcp_client_stream_t
data	network/tcp_server.h	/^    void           *data;                       \/* 每一个连接的私有数据 *\/$/;"	m	struct:_tcp_server_stream_t
data	utils/_string.h	/^    char *data;$/;"	m	struct:_string_t
data	utils/_thread_pool.h	/^    void             *data;$/;"	m	struct:_thread_pool_t
default_item_process_cb	utils/_property.c	/^static int default_item_process_cb(char *key, char *value, void *userp){$/;"	f	file:
delete_comment	utils/_string.c	/^void delete_comment(char *str, char comment_char){$/;"	f
delete_stream_from_busy_list	network/tcp_client.c	/^static void delete_stream_from_busy_list(tcp_client_t *client, tcp_client_stream_t *stream)$/;"	f	file:
delete_stream_from_busy_list	network/tcp_server.c	/^static void delete_stream_from_busy_list(tcp_server_t *server, tcp_server_stream_t *stream)$/;"	f	file:
delete_stream_from_idle_list	network/tcp_client.c	/^static void delete_stream_from_idle_list(tcp_client_t *client, tcp_client_stream_t *stream)$/;"	f	file:
delete_stream_from_idle_list	network/tcp_server.c	/^static void delete_stream_from_idle_list(tcp_server_t *server, tcp_server_stream_t *stream)$/;"	f	file:
deleted	utils/_shm.h	/^    int    deleted; $/;"	m	struct:_shm_t
des3_context	crypt/3des.h	/^des3_context;$/;"	t	typeref:struct:__anon2
des3_crypt	crypt/3des.c	/^void des3_crypt( uint32 SK[96], uint8 input[8], uint8 output[8] )$/;"	f
des3_decrypt	crypt/3des.c	/^void des3_decrypt( des3_context *ctx, uint8 input[8], uint8 output[8] )$/;"	f
des3_decrypt_ex	crypt/3des.c	/^void des3_decrypt_ex(des3_context *ctx, char * in,char * out,long len)$/;"	f
des3_encrypt	crypt/3des.c	/^void des3_encrypt( des3_context *ctx, uint8 input[8], uint8 output[8] )$/;"	f
des3_encrypt_ex	crypt/3des.c	/^void des3_encrypt_ex(des3_context *ctx, char * in,char * out,long len)$/;"	f
des3_set_2keys	crypt/3des.c	/^int des3_set_2keys( des3_context *ctx, uint8 key1[8], uint8 key2[8] )$/;"	f
des3_set_3keys	crypt/3des.c	/^int des3_set_3keys( des3_context *ctx, uint8 key1[8], uint8 key2[8],$/;"	f
des3_setkey_ex	crypt/3des.c	/^void des3_setkey_ex(des3_context *ctx, char * key,long keylen)$/;"	f
des_context	crypt/3des.h	/^des_context;$/;"	t	typeref:struct:__anon1
des_crypt	crypt/3des.c	/^void des_crypt( uint32 SK[32], uint8 input[8], uint8 output[8] )$/;"	f
des_decrypt	crypt/3des.c	/^void des_decrypt( des_context *ctx, uint8 input[8], uint8 output[8] )$/;"	f
des_encrypt	crypt/3des.c	/^void des_encrypt( des_context *ctx, uint8 input[8], uint8 output[8] )$/;"	f
des_main_ks	crypt/3des.c	/^int des_main_ks( uint32 SK[32], uint8 key[8] )$/;"	f
des_set_key	crypt/3des.c	/^int des_set_key( des_context *ctx, uint8 key[8] )$/;"	f
detached	utils/_shm.h	/^    int    detached;$/;"	m	struct:_shm_t
dir_list_cb	utils/_other.c	/^static void dir_list_cb(char *file_name){$/;"	f	file:
dsk	crypt/3des.h	/^    uint32 dsk[32];     \/* DES decryption subkeys *\/$/;"	m	struct:__anon1
dsk	crypt/3des.h	/^    uint32 dsk[96];     \/* Triple-DES decryption subkeys *\/$/;"	m	struct:__anon2
end	ip_zone/ip_zone.h	/^    unsigned int  end;$/;"	m	struct:_ip_zone_t
end	utils/_buffer.h	/^    char *end;                     \/* buffer的尾地址 *\/$/;"	m	struct:_buffer_t
end	utils/_mem_pool.h	/^    void               *end;       \/* 内存page的末地址 *\/$/;"	m	struct:_mem_page_t
epoll_fd	network/tcp_client.h	/^    int           epoll_fd;                   \/* epoll文件描述符 *\/$/;"	m	struct:_tcp_client_t
epoll_fd	network/tcp_server.h	/^    int           epoll_fd;                     \/* epoll文件描述符 *\/$/;"	m	struct:_tcp_server_t
error	network/tcp_client.h	/^    int                  error;               \/* 连接是否有错误 *\/$/;"	m	struct:_tcp_client_stream_t
error	network/tcp_server.h	/^    int             error;                      \/* 连接是否有错误 *\/$/;"	m	struct:_tcp_server_stream_t
esk	crypt/3des.h	/^    uint32 esk[32];     \/* DES encryption subkeys *\/$/;"	m	struct:__anon1
esk	crypt/3des.h	/^    uint32 esk[96];     \/* Triple-DES encryption subkeys *\/$/;"	m	struct:__anon2
failed	utils/_mem_pool.h	/^    int                 failed;    \/* 当前page申请内存失败的次数 *\/$/;"	m	struct:_mem_page_t
file_end	utils/_buffer.h	/^    off_t file_end;                \/* 文件buffer的结束位置 *\/$/;"	m	struct:_buffer_t
file_exist	utils/_other.c	/^int file_exist(char *file_name)$/;"	f
file_get_length	utils/_other.c	/^off_t file_get_length(const char *file_name)$/;"	f
file_start	utils/_buffer.h	/^    off_t file_start;              \/* 文件buffer的起始位置 *\/$/;"	m	struct:_buffer_t
file_suffix	utils/_other.c	/^char *file_suffix(char *file_name){$/;"	f
final	hashmap/hash_fcn.h	45;"	d
fini	conhash/util_rbtree.c	/^    int fini; \/* check failed ? *\/$/;"	m	struct:rbtree_check_s	file:
flag	conhash/conhash.h	/^  u_int flag;$/;"	m	struct:node_s
format_cur_time	utils/_log.c	/^static void format_cur_time(char *time_buffer, int time_buffer_size, char *format){$/;"	f	file:
front	utils/_queue.h	/^    int    front;  \/* 队列头部索引 *\/$/;"	m	struct:_queue_t
g_dc	lua/utils_lua.c	/^des3_context g_dc;$/;"	v
get_group_count	server_conhash/load_data.lua	/^function get_group_count()$/;"	f
get_group_count	server_conhash/server_conhash.c	/^int get_group_count(lua_State *L){$/;"	f
get_group_id	server_conhash/load_data.lua	/^function get_group_id(i)$/;"	f
get_group_id	server_conhash/server_conhash.c	/^int get_group_id(lua_State *L, int i){$/;"	f
get_idle_tcp_client_stream	network/tcp_client.c	/^static tcp_client_stream_t *get_idle_tcp_client_stream(tcp_client_t *client)$/;"	f	file:
get_idle_tcp_stream	network/tcp_server.c	/^static tcp_server_stream_t *get_idle_tcp_stream(tcp_server_t *server)$/;"	f	file:
get_server_by_seq	server_conhash/load_data.lua	/^function get_server_by_seq(i, n)$/;"	f
get_server_by_seq	server_conhash/server_conhash.c	/^void get_server_by_seq(lua_State *L, int i, int n, char *ip, int ip_size, char *hash_ip, int hash_ip_size){$/;"	f
get_server_count_by_seq	server_conhash/load_data.lua	/^function get_server_count_by_seq(i)$/;"	f
get_server_count_by_seq	server_conhash/server_conhash.c	/^int get_server_count_by_seq(lua_State *L, int group_id){$/;"	f
group	server_conhash/load_data.lua	/^function group(p)$/;"	f
group_conhash_free	server_conhash/server_conhash.c	/^static void group_conhash_free(void *data)$/;"	f	file:
group_load	server_conhash/server_conhash.c	/^static int group_load(lua_State *L, server_conhash_t *server_conhash)$/;"	f	file:
group_server_load	server_conhash/server_conhash.c	/^static int group_server_load(lua_State *L, server_conhash_t *server_conhash, $/;"	f	file:
hardener	hashmap/hash_fcn.h	/^ unsigned hardener;$/;"	m	struct:_hash_fcn_t
hash	conhash/conhash_inter.h	/^	long hash;$/;"	m	struct:virtual_node_s
hash_fcn	hashmap/hash_fcn.h	/^ unsigned (*hash_fcn)(struct _hash_fcn_t * p,$/;"	m	struct:_hash_fcn_t
hash_fcn	hashmap/hashmap.h	/^  hash_fcn_t  *hash_fcn;$/;"	m	struct:_hashmap_t
hash_fcn_free	hashmap/hash_fcn.c	/^void hash_fcn_free( hash_fcn_t * p )$/;"	f
hash_fcn_hash	hashmap/hash_fcn.c	/^unsigned hash_fcn_hash( hash_fcn_t * p, unsigned char *d, int n )$/;"	f
hash_fcn_new	hashmap/hash_fcn.c	/^hash_fcn_t * hash_fcn_new( int m )$/;"	f
hash_fcn_set_keyops	hashmap/hash_fcn.c	/^int hash_fcn_set_keyops( hash_fcn_t *h,$/;"	f
hash_fcn_static	hashmap/hash_fcn.c	/^void hash_fcn_static( hash_fcn_t * p )$/;"	f
hash_fcn_t	hashmap/hash_fcn.h	/^} hash_fcn_t;$/;"	t	typeref:struct:_hash_fcn_t
hashmap_add	hashmap/hashmap.c	/^int hashmap_add( hashmap_t * t, void * key, void * data )$/;"	f
hashmap_count	hashmap/hashmap.c	/^int hashmap_count( hashmap_t * t )$/;"	f
hashmap_delete	hashmap/hashmap.c	/^void hashmap_delete( hashmap_t * h )$/;"	f
hashmap_find	hashmap/hashmap.c	/^void * hashmap_find( hashmap_t * t, void * key)$/;"	f
hashmap_find2	hashmap/hashmap.c	/^int hashmap_find2(hashmap_t *t, void *key, void **data)$/;"	f
hashmap_find_node	hashmap/hashmap.c	/^static hashmap_node_t * hashmap_find_node( hashmap_t * t, void * key)$/;"	f	file:
hashmap_findfirst	hashmap/hashmap.c	/^hashmap_node_t * hashmap_findfirst( hashmap_t * t )$/;"	f
hashmap_findnext	hashmap/hashmap.c	/^hashmap_node_t * hashmap_findnext( hashmap_t * t )$/;"	f
hashmap_free_node	hashmap/hashmap.c	/^static int hashmap_free_node( hashmap_t * t, unsigned index, hashmap_node_t * hnode )$/;"	f	file:
hashmap_new	hashmap/hashmap.c	/^hashmap_t * hashmap_new(int nrows, int keysize, int userkeys, void (*userfree)(void*p))$/;"	f
hashmap_next	hashmap/hashmap.c	/^static void hashmap_next( hashmap_t * t )$/;"	f	file:
hashmap_node_t	hashmap/hashmap.h	/^}hashmap_node_t;$/;"	t	typeref:struct:_hashmap_node_t
hashmap_remove	hashmap/hashmap.c	/^int hashmap_remove( hashmap_t * t, void * key)$/;"	f
hashmap_set_keyops	hashmap/hashmap.c	/^int hashmap_set_keyops( hashmap_t *h ,$/;"	f
hashmap_splaymode	hashmap/hashmap.c	/^void hashmap_splaymode( hashmap_t * t, int n )$/;"	f
hashmap_t	hashmap/hashmap.h	/^}hashmap_t;$/;"	t	typeref:struct:_hashmap_t
head	utils/_mem_pool.h	/^    mem_page_t *head;              \/* 头page *\/$/;"	m	struct:_mem_pool_t
id	utils/_process_lock.h	/^    int   id;$/;"	m	struct:_process_lock_t
id	utils/_shm.h	/^    int    id;$/;"	m	struct:_shm_t
id	utils/_thread_pool.h	/^    int            id;$/;"	m	struct:_thread_context_t
iden	conhash/conhash.h	/^	char iden[64]; \/* node name or some thing identifies the node *\/$/;"	m	struct:node_s
idle_stream_head	network/tcp_client.h	/^    tcp_client_stream_t *idle_stream_head;    \/* idle stream链表头 *\/$/;"	m	struct:_tcp_client_t
idle_stream_head	network/tcp_server.h	/^    tcp_server_stream_t *idle_stream_head;      \/* idle stream链表头 *\/$/;"	m	struct:_tcp_server_t
idle_stream_num	network/tcp_client.h	/^    int                  idle_stream_num;     \/* idle stream的数量 *\/$/;"	m	struct:_tcp_client_t
idle_stream_num	network/tcp_server.h	/^    int           idle_stream_num;              \/* idle stream的数量 *\/$/;"	m	struct:_tcp_server_t
idle_stream_tail	network/tcp_client.h	/^    tcp_client_stream_t *idle_stream_tail;    \/* idle stream链表尾 *\/$/;"	m	struct:_tcp_client_t
idle_stream_tail	network/tcp_server.h	/^    tcp_server_stream_t *idle_stream_tail;      \/* idle stream链表尾 *\/$/;"	m	struct:_tcp_server_t
index	conhash/conhash.h	/^	u_int index;$/;"	m	struct:node_s
index	network/tcp_client.h	/^    int                  index;               \/* 每一个stream在stream数组中的下标,一旦初始化便不会改变 *\/$/;"	m	struct:_tcp_client_stream_t
index	network/tcp_server.h	/^    int             index;                      \/* 每一个stream在stream数组中的下标,一旦初始化便不会改变 *\/$/;"	m	struct:_tcp_server_stream_t
install_signals	t/tcp_client_test.c	/^static int install_signals(void){$/;"	f	file:
install_signals	t/tcp_server_test.c	/^static int install_signals(void){$/;"	f	file:
ip_free	server_conhash/server_conhash.c	/^static void ip_free(void *data)$/;"	f	file:
ip_zone_t	ip_zone/ip_zone.h	/^}ip_zone_t;$/;"	t	typeref:struct:_ip_zone_t
ip_zone_tree	ip_zone/ip_zone.h	/^    struct rb_root ip_zone_tree;$/;"	m	struct:_ip_zones_t	typeref:struct:_ip_zones_t::rb_root
ip_zones_add	ip_zone/ip_zone.c	/^static int ip_zones_add(ip_zones_t *ip_zones, char *line)$/;"	f	file:
ip_zones_destroy	ip_zone/ip_zone.c	/^void ip_zones_destroy(ip_zones_t **ip_zones)$/;"	f
ip_zones_dump	ip_zone/ip_zone.c	/^void ip_zones_dump(ip_zones_t *ip_zones)$/;"	f
ip_zones_find	ip_zone/ip_zone.c	/^const char *ip_zones_find(ip_zones_t *ip_zones, const char *ip)$/;"	f
ip_zones_load	ip_zone/ip_zone.c	/^ip_zones_t *ip_zones_load(const char *file_name)$/;"	f
ip_zones_t	ip_zone/ip_zone.h	/^}ip_zones_t;$/;"	t	typeref:struct:_ip_zones_t
ips	server_conhash/server_conhash.h	/^    hashmap_t *ips;  \/* 存储haship到ip的映射 *\/$/;"	m	struct:_server_conhash_t
is_blank	utils/_string.c	/^int is_blank(char *str){$/;"	f
is_comment	utils/_string.c	/^int is_comment(char *str, char comment_char){$/;"	f
is_new	utils/_shm.h	/^    int    is_new; \/* 表明共享内存是否本次创建，1 -> 本次创建，0 -> 打开已经存在的 *\/$/;"	m	struct:_shm_t
is_valid_ip	utils/_network.c	/^int is_valid_ip(const char *ip_str)$/;"	f
ivnodes	conhash/conhash_inter.h	/^    u_int ivnodes; \/* virtual node number *\/$/;"	m	struct:conhash_s
key	conhash/util_rbtree.h	/^    long key;$/;"	m	struct:util_rbtree_node_s
key	hashmap/hashmap.h	/^  void *key;   \/* Copy of, or Pointer to, the Users key *\/$/;"	m	struct:_hashmap_node_t
key	utils/_process_lock.h	/^    key_t key; $/;"	m	struct:_process_lock_t
key	utils/_shm.h	/^    key_t  key;$/;"	m	struct:_shm_t
keycmp_fcn	hashmap/hash_fcn.h	/^ int      (*keycmp_fcn)( const void *s1,$/;"	m	struct:_hash_fcn_t
keysize	hashmap/hashmap.h	/^  int          keysize;   \/* bytes in key, if < 0 -> keys are strings *\/$/;"	m	struct:_hashmap_t
last	network/tcp_client.h	/^    tcp_client_stream_t *last;                \/* 在busy或者idle stream双向链表中的上一个stream *\/$/;"	m	struct:_tcp_client_stream_t
last	network/tcp_server.h	/^    tcp_server_stream_t  *last;                 \/* 在busy或者idle stream双向链表中的上一个stream *\/$/;"	m	struct:_tcp_server_stream_t
last	utils/_buffer.h	/^    char *last;                    \/* buffer中可用数据的尾地址 *\/$/;"	m	struct:_buffer_t
last	utils/_mem_pool.h	/^    void               *last;      \/* 内存page可用内存的地址 *\/$/;"	m	struct:_mem_page_t
left	conhash/util_rbtree.h	/^    util_rbtree_node_t *left;$/;"	m	struct:util_rbtree_node_s
len	utils/_string.h	/^    int   len;$/;"	m	struct:_string_t
list_dir	utils/_other.c	/^int list_dir(char *path, void (*callback)(char *file_name)){$/;"	f
listen_fd	network/tcp_server.h	/^    int           listen_fd;                    \/* 监听server描述符 *\/$/;"	m	struct:_tcp_server_t
load_data	server_conhash/load_data.lua	/^function load_data()$/;"	f
load_data	server_conhash/server_conhash.c	/^void load_data(lua_State *L){$/;"	f
lock	utils/_mem_pool.h	/^    pthread_mutex_t lock;$/;"	m	struct:_mem_pool_t
lock	utils/_queue.h	/^    pthread_mutex_t lock; \/* 队列操作锁 *\/$/;"	m	struct:_queue_t
log_by_level	utils/_log.c	/^int log_by_level(int level, const char *fmt, ...)$/;"	f
log_close	utils/_log.c	/^int log_close()$/;"	f
log_debug	utils/_log.c	/^int log_debug(const char *fmt, ...)$/;"	f
log_dst	utils/_log.c	/^static int log_dst   = LOG_DESTINATION_CONSOLE;$/;"	v	file:
log_error	utils/_log.c	/^int log_error(const char *fmt, ...)$/;"	f
log_fd	utils/_log.c	/^static int log_fd    = STDOUT_FILENO;$/;"	v	file:
log_info	utils/_log.c	/^int log_info(const char *fmt, ...)$/;"	f
log_level	utils/_log.c	/^static int log_level = LOG_LEVEL_INFO;$/;"	v	file:
log_level_int	utils/_log.c	/^int log_level_int(char *level_str){$/;"	f
log_level_map	utils/_log.c	/^static char *log_level_map[] = {$/;"	v	file:
log_level_str	utils/_log.c	/^char *log_level_str(int level){$/;"	f
log_set_file	utils/_log.c	/^int log_set_file(char *file_name)$/;"	f
log_set_level	utils/_log.c	/^void log_set_level(int level)$/;"	f
log_set_syslog	utils/_log.c	/^int log_set_syslog(char *ip, int port, int facility, char *hostname, char *program)$/;"	f
log_warn	utils/_log.c	/^int log_warn(const char *fmt, ...)$/;"	f
lua_conhash_add_node	lua/utils_lua.c	/^int lua_conhash_add_node(lua_State *L)$/;"	f
lua_conhash_del_node	lua/utils_lua.c	/^int lua_conhash_del_node(lua_State *L)$/;"	f
lua_conhash_fini	lua/utils_lua.c	/^int lua_conhash_fini(lua_State *L)$/;"	f
lua_conhash_init	lua/utils_lua.c	/^int lua_conhash_init(lua_State *L)$/;"	f
lua_conhash_lookup	lua/utils_lua.c	/^int lua_conhash_lookup(lua_State *L)$/;"	f
lua_decrypt_des3	lua/utils_lua.c	/^int lua_decrypt_des3(lua_State *L)$/;"	f
lua_encrypt_des3	lua/utils_lua.c	/^int lua_encrypt_des3(lua_State *L)$/;"	f
lua_gen_md5	lua/utils_lua.c	/^int lua_gen_md5(lua_State *L)$/;"	f
lua_gen_time_token_des3	lua/utils_lua.c	/^int lua_gen_time_token_des3(lua_State *L)$/;"	f
lua_ip_zones_destroy	lua/utils_lua.c	/^int lua_ip_zones_destroy(lua_State *L)$/;"	f
lua_ip_zones_find	lua/utils_lua.c	/^int lua_ip_zones_find(lua_State *L)$/;"	f
lua_ip_zones_load	lua/utils_lua.c	/^int lua_ip_zones_load(lua_State *L)$/;"	f
lua_server_conhash_create	lua/utils_lua.c	/^int lua_server_conhash_create(lua_State *L)$/;"	f
lua_server_conhash_destroy	lua/utils_lua.c	/^int lua_server_conhash_destroy(lua_State *L)$/;"	f
lua_server_conhash_find	lua/utils_lua.c	/^int lua_server_conhash_find(lua_State *L)$/;"	f
luaopen_utils_lua	lua/utils_lua.c	/^LUALIB_API int luaopen_utils_lua(lua_State *L)$/;"	f
main	main.c	/^int main ( int argc, char ** argv )$/;"	f
main	t/tcp_client_test.c	/^int main(int argc, char **argv) $/;"	f
main	t/tcp_server_test.c	/^int main(int argc, char **argv) $/;"	f
main	t/unix_socket_udp_client.c	/^int main(void) $/;"	f
main	t/unix_socket_udp_server.c	/^int main(void) $/;"	f
main	utils/_log.c	/^int main(void)$/;"	f
main	utils/_other.c	/^int main(int argc, char **argv){$/;"	f
main	utils/_process_lock.c	/^int main(void)$/;"	f
main	utils/_syslog.c	/^int main(void)$/;"	f
malloc_wrapper	utils/_memory.c	/^void *malloc_wrapper(int size){$/;"	f
max_idle_time	network/tcp_client.h	/^    int           max_idle_time;              \/* 连接的最大超时时间 *\/$/;"	m	struct:_tcp_client_t
max_idle_time	network/tcp_server.h	/^    int           max_idle_time;                \/* 连接的最大超时时间 *\/$/;"	m	struct:_tcp_server_t
maxd	conhash/util_rbtree.c	/^    short maxd; \/* max depth of the tree *\/$/;"	m	struct:rbtree_check_s	file:
md5_INCLUDED	conhash/md5.h	51;"	d
md5_INCLUDED	crypt/md5.h	51;"	d
md5_append	conhash/md5.c	/^md5_append(md5_state_t *pms, const md5_byte_t *data, int nbytes)$/;"	f
md5_append	crypt/md5.c	/^md5_append(md5_state_t *pms, const md5_byte_t *data, int nbytes)$/;"	f
md5_byte_t	conhash/md5.h	/^typedef unsigned char md5_byte_t; \/* 8-bit byte *\/$/;"	t
md5_byte_t	crypt/md5.h	/^typedef unsigned char md5_byte_t; \/* 8-bit byte *\/$/;"	t
md5_finish	conhash/md5.c	/^md5_finish(md5_state_t *pms, md5_byte_t digest[16])$/;"	f
md5_finish	crypt/md5.c	/^md5_finish(md5_state_t *pms, md5_byte_t digest[16])$/;"	f
md5_init	conhash/md5.c	/^md5_init(md5_state_t *pms)$/;"	f
md5_init	crypt/md5.c	/^md5_init(md5_state_t *pms)$/;"	f
md5_process	conhash/md5.c	/^md5_process(md5_state_t *pms, const md5_byte_t *data \/*[64]*\/)$/;"	f	file:
md5_process	crypt/md5.c	/^md5_process(md5_state_t *pms, const md5_byte_t *data \/*[64]*\/)$/;"	f	file:
md5_state_s	conhash/md5.h	/^typedef struct md5_state_s {$/;"	s
md5_state_s	crypt/md5.h	/^typedef struct md5_state_s {$/;"	s
md5_state_t	conhash/md5.h	/^} md5_state_t;$/;"	t	typeref:struct:md5_state_s
md5_state_t	crypt/md5.h	/^} md5_state_t;$/;"	t	typeref:struct:md5_state_s
md5_word_t	conhash/md5.h	/^typedef unsigned int md5_word_t; \/* 32-bit word *\/$/;"	t
md5_word_t	crypt/md5.h	/^typedef unsigned int md5_word_t; \/* 32-bit word *\/$/;"	t
mem_page_t	utils/_mem_pool.h	/^}mem_page_t;$/;"	t	typeref:struct:_mem_page_t
mem_pool_alloc	utils/_mem_pool.c	/^void *mem_pool_alloc(mem_pool_t *mem_pool, int size)$/;"	f
mem_pool_calloc	utils/_mem_pool.c	/^void *mem_pool_calloc(mem_pool_t *mem_pool, int size)$/;"	f
mem_pool_create	utils/_mem_pool.c	/^mem_pool_t *mem_pool_create()$/;"	f
mem_pool_destroy	utils/_mem_pool.c	/^void mem_pool_destroy(mem_pool_t **mem_pool)$/;"	f
mem_pool_dump	utils/_mem_pool.c	/^void mem_pool_dump(mem_pool_t *mem_pool){$/;"	f
mem_pool_t	utils/_mem_pool.h	/^}mem_pool_t;$/;"	t	typeref:struct:_mem_pool_t
mix	hashmap/hash_fcn.h	35;"	d
months	utils/_syslog.c	/^static char *months[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",$/;"	v	file:
movetofront	hashmap/hashmap.c	/^static void movetofront( hashmap_t *t , int index, hashmap_node_t * n )$/;"	f	file:
name	utils/_syslog.h	/^    char *name;$/;"	m	struct:_syslog_code_t
nearest_prime	hashmap/prime_table.c	/^int nearest_prime(int n)$/;"	f
netmask	ip_zone/ip_zone.h	/^    unsigned char netmask;$/;"	m	struct:_ip_zone_t
next	hashmap/hashmap.h	/^  struct _hashmap_node_t *next, *prev;$/;"	m	struct:_hashmap_node_t	typeref:struct:_hashmap_node_t::_hashmap_node_t
next	network/tcp_client.h	/^    tcp_client_stream_t *next;                \/* 在busy或者idle stream双向链表中的下一个stream *\/$/;"	m	struct:_tcp_client_stream_t
next	network/tcp_server.h	/^    tcp_server_stream_t  *next;                 \/* 在busy或者idle stream双向链表中的下一个stream *\/$/;"	m	struct:_tcp_server_stream_t
next	utils/_buffer.h	/^    struct _buffer_chain_t *next;$/;"	m	struct:_buffer_chain_t	typeref:struct:_buffer_chain_t::_buffer_chain_t
next	utils/_mem_pool.h	/^    struct _mem_page_t *next;      \/* 下一个内存page *\/$/;"	m	struct:_mem_page_t	typeref:struct:_mem_page_t::_mem_page_t
nic_get_ip	network/network_util.c	/^int nic_get_ip(char *name, char *ip, int ip_size)$/;"	f
node	conhash/conhash_inter.h	/^	struct node_s *node; \/* pointer to node *\/$/;"	m	struct:virtual_node_s	typeref:struct:virtual_node_s::node_s
node	ip_zone/ip_zone.h	/^    struct rb_node node;$/;"	m	struct:_ip_zone_t	typeref:struct:_ip_zone_t::rb_node
node_s	conhash/conhash.h	/^typedef struct node_s$/;"	s
nrows	hashmap/hashmap.h	/^  int              nrows;  \/* # rows int the hash table use a prime number 211, 9871 *\/$/;"	m	struct:_hashmap_t
null	conhash/util_rbtree.c	/^    const util_rbtree_node_t *null; \/* sentinel of the tree *\/$/;"	m	struct:rbtree_check_s	file:
null	conhash/util_rbtree.h	/^    util_rbtree_node_t  null;$/;"	m	struct:util_rbtree_s
p_item_process_cb	utils/_property.c	/^static int (*p_item_process_cb)(char *key, char *value, void *userp);$/;"	v	file:
page_count	utils/_mem_pool.h	/^    int         page_count;        \/* 当前内存池有多少个page *\/$/;"	m	struct:_mem_pool_t
page_size	utils/_mem_pool.h	/^    int         page_size;         \/* 内存page的大小，为固定值 *\/$/;"	m	struct:_mem_pool_t
parent	conhash/util_rbtree.h	/^    util_rbtree_node_t *parent;$/;"	m	struct:util_rbtree_node_s
pool	network/tcp_client.h	/^    mem_pool_t          *pool;                \/* 每一个连接请求负责内存分配的内存池 *\/$/;"	m	struct:_tcp_client_stream_t
pool	network/tcp_server.h	/^    mem_pool_t     *pool;                       \/* 每一个连接请求负责内存分配的内存池 *\/$/;"	m	struct:_tcp_server_stream_t
pool	utils/_buffer.h	/^    mem_pool_t *pool;              \/* 如果不为空，表示buffer内部内存分配从pool分配 *\/$/;"	m	struct:_buffer_t
port	network/tcp_client.h	/^    int                  port;                \/* 服务器端口 *\/$/;"	m	struct:_tcp_client_stream_t
port	network/tcp_server.h	/^    int           port;                         \/* tcp server监听端口 *\/$/;"	m	struct:_tcp_server_t
pos	utils/_buffer.h	/^    char *pos;                     \/* buffer中可用数据的地址 *\/$/;"	m	struct:_buffer_t
prev	hashmap/hashmap.h	/^  struct _hashmap_node_t *next, *prev;$/;"	m	struct:_hashmap_node_t	typeref:struct:_hashmap_node_t::
prime_table0	hashmap/prime_table.c	/^static unsigned prime_table0[1024]={$/;"	v	file:
prime_table1	hashmap/prime_table.c	/^static unsigned prime_table1[]={$/;"	v	file:
prime_table2	hashmap/prime_table.c	/^static unsigned prime_table2[1024]={$/;"	v	file:
prime_table3	hashmap/prime_table.c	/^unsigned prime_table3[1024]={$/;"	v	file:
process_lock	utils/_process_lock.c	/^int process_lock(process_lock_t *pm){$/;"	f
process_lock_create	utils/_process_lock.c	/^process_lock_t *process_lock_create(char *file, int sub_id){$/;"	f
process_lock_delete	utils/_process_lock.c	/^int process_lock_delete(process_lock_t *pm){$/;"	f
process_lock_init	utils/_process_lock.c	/^int process_lock_init(process_lock_t *pm){$/;"	f
process_lock_release	utils/_process_lock.c	/^int process_lock_release(process_lock_t **pm){$/;"	f
process_lock_t	utils/_process_lock.h	/^}process_lock_t;$/;"	t	typeref:struct:_process_lock_t
process_try_lock	utils/_process_lock.c	/^int process_try_lock(process_lock_t *pm){$/;"	f
process_unlock	utils/_process_lock.c	/^int process_unlock(process_lock_t *pm){$/;"	f
property_read	utils/_property.c	/^int property_read(char *file_name, int (*item_process_cb)(char *key, char *value, void *userp), $/;"	f
property_set_comment_char	utils/_property.c	/^void property_set_comment_char(char c)$/;"	f
q	utils/_queue.h	/^    void **q;      \/* 队列节点数组 *\/$/;"	m	struct:_queue_t
queue	utils/_thread_pool.h	/^    queue_t          *queue;$/;"	m	struct:_thread_pool_t
queue_create	utils/_queue.c	/^queue_t *queue_create(int size)$/;"	f
queue_destroy	utils/_queue.c	/^void queue_destroy(queue_t **queue){$/;"	f
queue_element_count	utils/_queue.c	/^int queue_element_count(queue_t *queue)$/;"	f
queue_empty	utils/_queue.c	/^int queue_empty(queue_t *queue)$/;"	f
queue_full	utils/_queue.c	/^static int queue_full(queue_t *queue){$/;"	f	file:
queue_pop	utils/_queue.c	/^void *queue_pop(queue_t *queue)$/;"	f
queue_push	utils/_queue.c	/^int queue_push(queue_t *queue, void *data)$/;"	f
queue_size	utils/_queue.c	/^int queue_size(queue_t *queue)$/;"	f
queue_t	utils/_queue.h	/^}queue_t;$/;"	t	typeref:struct:_queue_t
rb_augment_erase_begin	rbtree/rbtree.c	/^struct rb_node *rb_augment_erase_begin(struct rb_node *node)$/;"	f
rb_augment_erase_end	rbtree/rbtree.c	/^void rb_augment_erase_end(struct rb_node *node, rb_augment_f func, void *data)$/;"	f
rb_augment_f	rbtree/rbtree.h	/^typedef void (*rb_augment_f)(struct rb_node *node, void *data);$/;"	t
rb_augment_insert	rbtree/rbtree.c	/^void rb_augment_insert(struct rb_node *node, rb_augment_f func, void *data)$/;"	f
rb_augment_path	rbtree/rbtree.c	/^static void rb_augment_path(struct rb_node *node, rb_augment_f func, void *data)$/;"	f	file:
rb_color	rbtree/rbtree.h	130;"	d
rb_entry	rbtree/rbtree.h	146;"	d
rb_erase	rbtree/rbtree.c	/^void rb_erase(struct rb_node *node, struct rb_root *root)$/;"	f
rb_first	rbtree/rbtree.c	/^struct rb_node *rb_first(const struct rb_root *root)$/;"	f
rb_insert_color	rbtree/rbtree.c	/^void rb_insert_color(struct rb_node *node, struct rb_root *root)$/;"	f
rb_is_black	rbtree/rbtree.h	132;"	d
rb_is_red	rbtree/rbtree.h	131;"	d
rb_last	rbtree/rbtree.c	/^struct rb_node *rb_last(const struct rb_root *root)$/;"	f
rb_left	rbtree/rbtree.h	/^	struct rb_node *rb_left;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_link_node	rbtree/rbtree.h	/^static inline void rb_link_node(struct rb_node * node, struct rb_node * parent,$/;"	f
rb_next	rbtree/rbtree.c	/^struct rb_node *rb_next(const struct rb_node *node)$/;"	f
rb_node	rbtree/rbtree.h	/^	struct rb_node *rb_node;$/;"	m	struct:rb_root	typeref:struct:rb_root::rb_node
rb_node	rbtree/rbtree.h	/^struct rb_node$/;"	s
rb_parent	rbtree/rbtree.h	129;"	d
rb_parent_color	rbtree/rbtree.h	/^	unsigned long  rb_parent_color;$/;"	m	struct:rb_node
rb_prev	rbtree/rbtree.c	/^struct rb_node *rb_prev(const struct rb_node *node)$/;"	f
rb_replace_node	rbtree/rbtree.c	/^void rb_replace_node(struct rb_node *victim, struct rb_node *new,$/;"	f
rb_right	rbtree/rbtree.h	/^	struct rb_node *rb_right;$/;"	m	struct:rb_node	typeref:struct:rb_node::rb_node
rb_root	rbtree/rbtree.h	/^struct rb_root$/;"	s
rb_set_black	rbtree/rbtree.h	134;"	d
rb_set_color	rbtree/rbtree.h	/^static inline void rb_set_color(struct rb_node *rb, int color)$/;"	f
rb_set_parent	rbtree/rbtree.h	/^static inline void rb_set_parent(struct rb_node *rb, struct rb_node *p)$/;"	f
rb_set_red	rbtree/rbtree.h	133;"	d
rbh	conhash/util_rbtree.c	/^    short rbh; \/* rb height of the tree *\/$/;"	m	struct:rbtree_check_s	file:
rbt_clear_node	conhash/util_rbtree.h	37;"	d
rbtree_check_s	conhash/util_rbtree.c	/^struct rbtree_check_s$/;"	s	file:
rbtree_check_subtree	conhash/util_rbtree.c	/^static void rbtree_check_subtree(const util_rbtree_node_t *node, rbtree_check_t *check, $/;"	f	file:
rbtree_check_t	conhash/util_rbtree.c	/^typedef struct rbtree_check_s rbtree_check_t;$/;"	t	typeref:struct:rbtree_check_s	file:
rbtree_delete_fixup	conhash/util_rbtree.c	/^void rbtree_delete_fixup(util_rbtree_t *rbtree, util_rbtree_node_t *node)$/;"	f
rbtree_insert	ip_zone/ip_zone.c	/^static int rbtree_insert(struct rb_root *root, ip_zone_t *data)$/;"	f	file:
rbtree_insert_fixup	conhash/util_rbtree.c	/^void rbtree_insert_fixup(util_rbtree_t *rbtree, util_rbtree_node_t *node)$/;"	f
rbtree_left_rotate	conhash/util_rbtree.c	/^void rbtree_left_rotate(util_rbtree_t *rbtree, util_rbtree_node_t *node)$/;"	f
rbtree_mid_travel	conhash/util_rbtree.c	/^static void rbtree_mid_travel(util_rbtree_node_t *node, util_rbtree_node_t *sentinel, $/;"	f	file:
rbtree_right_rotate	conhash/util_rbtree.c	/^void rbtree_right_rotate(util_rbtree_t *rbtree, util_rbtree_node_t *node)$/;"	f
rbtree_search	ip_zone/ip_zone.c	/^static ip_zone_t *rbtree_search(struct rb_root *root, const char *str_ip)$/;"	f	file:
rcv_cb	network/tcp_client.h	/^    tcp_client_rcv_cb_t  rcv_cb;              \/* 接收数据回调函数 *\/$/;"	m	struct:_tcp_client_stream_t
rcv_cb	network/tcp_server.h	/^    tcp_server_rcv_cb_t   rcv_cb;               \/* 接收数据回调函数 *\/$/;"	m	struct:_tcp_server_stream_t
rcv_cb	network/tcp_server.h	/^    tcp_server_rcv_cb_t rcv_cb;                 \/* 接收数据回调函数 *\/$/;"	m	struct:_tcp_server_t
rcv_cb_default	network/tcp_client.c	/^static int rcv_cb_default(tcp_client_stream_t *stream)$/;"	f	file:
rcv_cb_default	network/tcp_server.c	/^static int rcv_cb_default(tcp_server_stream_t *stream)$/;"	f	file:
read_ip_zones_from_file	ip_zone/ip_zone.c	/^static char *read_ip_zones_from_file(const char *file_name, off_t *size)$/;"	f	file:
rear	utils/_queue.h	/^    int    rear;   \/* 队列尾部索引 *\/$/;"	m	struct:_queue_t
remote_addr	network/tcp_server.h	/^    struct sockaddr_in    remote_addr;          \/* 远程客户端地址 *\/$/;"	m	struct:_tcp_server_stream_t	typeref:struct:_tcp_server_stream_t::sockaddr_in
remove_file	utils/_other.c	/^int remove_file(char *file_name)$/;"	f
replicas	conhash/conhash.h	/^  u_int replicas; \/* number of replica virtual nodes *\/$/;"	m	struct:node_s
right	conhash/util_rbtree.h	/^    util_rbtree_node_t *right;$/;"	m	struct:util_rbtree_node_s
root	conhash/util_rbtree.h	/^    util_rbtree_node_t *root;$/;"	m	struct:util_rbtree_s
rot	hashmap/hash_fcn.h	33;"	d
s_alloc	hashmap/hashmap.c	/^void * s_alloc( int n )$/;"	f	file:
s_free	hashmap/hashmap.c	/^void s_free( void * p )$/;"	f	file:
scale	hashmap/hash_fcn.h	/^ unsigned scale;$/;"	m	struct:_hash_fcn_t
seed	hashmap/hash_fcn.h	/^ unsigned seed;$/;"	m	struct:_hash_fcn_t
semun	utils/_process_lock.c	/^union semun {$/;"	u	file:
server	network/tcp_server.h	/^    tcp_server_t   *server;                     \/* 指向tcp server *\/$/;"	m	struct:_tcp_server_stream_t
server	t/tcp_server_test.c	/^static tcp_server_t *server = NULL;$/;"	v	file:
server_addr	network/tcp_client.h	/^    struct sockaddr_in   server_addr;         \/* 服务器端地址 *\/$/;"	m	struct:_tcp_client_stream_t	typeref:struct:_tcp_client_stream_t::sockaddr_in
server_conhash_create	server_conhash/server_conhash.c	/^server_conhash_t *server_conhash_create(char *lua_file)$/;"	f
server_conhash_destroy	server_conhash/server_conhash.c	/^void server_conhash_destroy(server_conhash_t **server_conhash)$/;"	f
server_conhash_find	server_conhash/server_conhash.c	/^char *server_conhash_find(server_conhash_t *server_conhash, int group_id, char *url)$/;"	f
server_conhash_t	server_conhash/server_conhash.h	/^}server_conhash_t;$/;"	t	typeref:struct:_server_conhash_t
server_ip	network/tcp_client.h	/^    char                *server_ip;           \/* server IP地址 *\/$/;"	m	struct:_tcp_client_stream_t
set_non_blocking	network/network_util.c	/^int set_non_blocking(int sock_fd){$/;"	f
set_reuse_addr	network/network_util.c	/^int set_reuse_addr(int sock_fd){$/;"	f
shm_create	utils/_shm.c	/^shm_t *shm_create(char *shm_file, size_t size)$/;"	f
shm_delete	utils/_shm.c	/^int shm_delete(shm_t **shm)$/;"	f
shm_destroy	utils/_shm.c	/^int shm_destroy(shm_t **shm)$/;"	f
shm_detach	utils/_shm.c	/^int shm_detach(shm_t *shm)$/;"	f
shm_t	utils/_shm.h	/^}shm_t;$/;"	t	typeref:struct:_shm_t
signal_handle	t/tcp_client_test.c	/^static void signal_handle(int signum){$/;"	f	file:
signal_handle	t/tcp_server_test.c	/^static void signal_handle(int signum){$/;"	f	file:
size	conhash/conhash_inter.h	/^    long size, cur;$/;"	m	struct:__get_vnodes_s
size	conhash/util_rbtree.h	/^    u_int size;$/;"	m	struct:util_rbtree_s
size	utils/_queue.h	/^    int    size;   \/* 队列能够容纳的节点数 *\/$/;"	m	struct:_queue_t
size	utils/_shm.h	/^    size_t size;$/;"	m	struct:_shm_t
snd_cb	network/tcp_client.h	/^    tcp_client_snd_cb_t  snd_cb;              \/* 发送数据回调函数 *\/$/;"	m	struct:_tcp_client_stream_t
snd_cb	network/tcp_server.h	/^    tcp_server_snd_cb_t   snd_cb;               \/* 发送数据回调函数 *\/$/;"	m	struct:_tcp_server_stream_t
snd_cb	network/tcp_server.h	/^    tcp_server_snd_cb_t snd_cb;                 \/* 发送数据回调函数 *\/$/;"	m	struct:_tcp_server_t
snd_cb_default	network/tcp_client.c	/^static int snd_cb_default(tcp_client_stream_t *stream)$/;"	f	file:
snd_cb_default	network/tcp_server.c	/^static int snd_cb_default(tcp_server_stream_t *stream)$/;"	f	file:
sock_fd	network/tcp_client.h	/^    int                  sock_fd;             \/* socket文件描述符 *\/$/;"	m	struct:_tcp_client_stream_t
sock_fd	network/tcp_server.h	/^    int             sock_fd;                    \/* socket文件描述符 *\/$/;"	m	struct:_tcp_server_stream_t
sock_set_nonblocking	utils/_network.c	/^int sock_set_nonblocking(int sock_fd)$/;"	f
sock_set_rcv_buffer_size	utils/_network.c	/^int sock_set_rcv_buffer_size(int sock_fd, int size)$/;"	f
sock_set_snd_buffer_size	utils/_network.c	/^int sock_set_snd_buffer_size(int sock_fd, int size)$/;"	f
splay	hashmap/hashmap.h	/^  int splay;$/;"	m	struct:_hashmap_t
split_url	utils/_string.c	/^void split_url(char *url, char *path, int path_size, char *name, int name_size){$/;"	f
start	ip_zone/ip_zone.h	/^    unsigned int  start;$/;"	m	struct:_ip_zone_t
start	utils/_buffer.h	/^    char *start;                   \/* buffer的首地址,一般不会改变 *\/$/;"	m	struct:_buffer_t
start	utils/_mem_pool.h	/^    void               *start;     \/* 内存page的起始地址 *\/$/;"	m	struct:_mem_page_t
stop	network/tcp_client.h	/^    int                  stop;$/;"	m	struct:_tcp_client_t
stop	network/tcp_server.h	/^    int           stop;$/;"	m	struct:_tcp_server_t
str_cmp	utils/_string.c	/^int str_cmp(char *str1, int size1, char *str2, int size2)$/;"	f
stream_num	network/tcp_client.h	/^    int                  stream_num;          \/* 支持的最大的stream的数量 *\/$/;"	m	struct:_tcp_client_t
stream_num	network/tcp_server.h	/^    int           stream_num;                   \/* 支持的最大的stream的数量 *\/$/;"	m	struct:_tcp_server_t
streams	network/tcp_client.h	/^    tcp_client_stream_t *streams;             \/* 支持的stream的数组 *\/$/;"	m	struct:_tcp_client_t
streams	network/tcp_server.h	/^    tcp_server_stream_t *streams;               \/* 支持的stream的数组 *\/$/;"	m	struct:_tcp_server_t
string_t	utils/_string.h	/^}string_t;$/;"	t	typeref:struct:_string_t
subnet	ip_zone/ip_zone.h	/^    char subnet[MAX_SUBNET_SIZE];$/;"	m	struct:_ip_zone_t
syslog_addr	utils/_syslog.c	/^static struct sockaddr_in syslog_addr;$/;"	v	typeref:struct:sockaddr_in	file:
syslog_close	utils/_syslog.c	/^int syslog_close()$/;"	f
syslog_code_t	utils/_syslog.h	/^}syslog_code_t;$/;"	t	typeref:struct:_syslog_code_t
syslog_facility	utils/_syslog.c	/^static int  syslog_facility     = -1;$/;"	v	file:
syslog_hostname	utils/_syslog.c	/^static char syslog_hostname[32] = {0};$/;"	v	file:
syslog_ip	utils/_syslog.c	/^static char syslog_ip[32]       = {0};$/;"	v	file:
syslog_level_map	utils/_log.c	/^static int syslog_level_map[] = {$/;"	v	file:
syslog_open	utils/_syslog.c	/^int syslog_open(char *ip, int port, int facility, char *hostname, char *program)$/;"	f
syslog_port	utils/_syslog.c	/^static int  syslog_port         = 0;$/;"	v	file:
syslog_program	utils/_syslog.c	/^static char syslog_program[32]  = {0};$/;"	v	file:
syslog_sock_fd	utils/_syslog.c	/^static int  syslog_sock_fd      = -1;$/;"	v	file:
syslog_write	utils/_syslog.c	/^int syslog_write(int level, char *msg, int length)$/;"	f
table	hashmap/hashmap.h	/^  hashmap_node_t **table;  \/* array of node ptr's *\/$/;"	m	struct:_hashmap_t
tail	utils/_mem_pool.h	/^    mem_page_t *tail;              \/* 尾page *\/$/;"	m	struct:_mem_pool_t
tcp_client_add_server	network/tcp_client.c	/^int tcp_client_add_server(tcp_client_t *client, $/;"	f
tcp_client_conn_cb_t	network/tcp_client.h	/^typedef int (*tcp_client_conn_cb_t)(tcp_client_stream_t *stream);$/;"	t
tcp_client_create	network/tcp_client.c	/^tcp_client_t *tcp_client_create(int max_conn)$/;"	f
tcp_client_destroy	network/tcp_client.c	/^void tcp_client_destroy(tcp_client_t *client)$/;"	f
tcp_client_rcv_cb_t	network/tcp_client.h	/^typedef int (*tcp_client_rcv_cb_t)(tcp_client_stream_t *stream);$/;"	t
tcp_client_read	network/tcp_client.c	/^int tcp_client_read(tcp_client_stream_t *stream, buffer_t *buffer)$/;"	f
tcp_client_run	network/tcp_client.c	/^int tcp_client_run(tcp_client_t *client)$/;"	f
tcp_client_send	network/tcp_client.c	/^int tcp_client_send(tcp_client_stream_t *stream, void *data, int size)$/;"	f
tcp_client_snd_cb_t	network/tcp_client.h	/^typedef int (*tcp_client_snd_cb_t)(tcp_client_stream_t *stream);$/;"	t
tcp_client_stop	network/tcp_client.c	/^void tcp_client_stop(tcp_client_t *client)$/;"	f
tcp_client_stream_init	network/tcp_client.c	/^static int tcp_client_stream_init(tcp_client_t *client, $/;"	f	file:
tcp_client_stream_reset	network/tcp_client.c	/^static void tcp_client_stream_reset(tcp_client_stream_t *stream)$/;"	f	file:
tcp_client_stream_t	network/tcp_client.h	/^typedef struct _tcp_client_stream_t tcp_client_stream_t;$/;"	t	typeref:struct:_tcp_client_stream_t
tcp_client_t	network/tcp_client.h	/^typedef struct _tcp_client_t tcp_client_t;$/;"	t	typeref:struct:_tcp_client_t
tcp_server_create	network/tcp_server.c	/^tcp_server_t *tcp_server_create(int port, int max_conn)$/;"	f
tcp_server_destroy	network/tcp_server.c	/^void tcp_server_destroy(tcp_server_t *server)$/;"	f
tcp_server_rcv_cb_t	network/tcp_server.h	/^typedef int (*tcp_server_rcv_cb_t)(tcp_server_stream_t *stream);$/;"	t
tcp_server_read	network/tcp_server.c	/^int tcp_server_read(tcp_server_stream_t *stream, buffer_t *buffer)$/;"	f
tcp_server_run	network/tcp_server.c	/^int tcp_server_run(tcp_server_t *server)$/;"	f
tcp_server_set_rcv_cb	network/tcp_server.c	/^void tcp_server_set_rcv_cb(tcp_server_t *server, tcp_server_rcv_cb_t cb)$/;"	f
tcp_server_set_snd_cb	network/tcp_server.c	/^void tcp_server_set_snd_cb(tcp_server_t *server, tcp_server_snd_cb_t cb)$/;"	f
tcp_server_snd_cb_t	network/tcp_server.h	/^typedef int (*tcp_server_snd_cb_t)(tcp_server_stream_t *stream);$/;"	t
tcp_server_stop	network/tcp_server.c	/^void tcp_server_stop(tcp_server_t *server)$/;"	f
tcp_server_stream_t	network/tcp_server.h	/^typedef struct _tcp_server_stream_t tcp_server_stream_t;$/;"	t	typeref:struct:_tcp_server_stream_t
tcp_server_t	network/tcp_server.h	/^typedef struct _tcp_server_t tcp_server_t;$/;"	t	typeref:struct:_tcp_server_t
tcp_state	network/tcp_client.h	/^    int                  tcp_state;           \/* TCP状态，连接中；连接成功 *\/$/;"	m	struct:_tcp_client_stream_t
tcp_stream_close	network/tcp_server.c	/^static void tcp_stream_close(tcp_server_stream_t *stream)$/;"	f	file:
tcp_stream_init	network/tcp_server.c	/^static void tcp_stream_init(tcp_server_t *server, tcp_server_stream_t *stream, $/;"	f	file:
thr_fn	t/tcp_client_test.c	/^void thr_fn(void *arg)$/;"	f
thread	utils/_thread_pool.h	/^    pthread_t      thread;$/;"	m	struct:_thread_context_t
thread_context_t	utils/_thread_pool.h	/^typedef struct _thread_context_t thread_context_t;$/;"	t	typeref:struct:_thread_context_t
thread_func_t	utils/_thread_pool.h	/^typedef void *(*thread_func_t)(void*);$/;"	t
thread_num	utils/_thread_pool.h	/^    int               thread_num;$/;"	m	struct:_thread_pool_t
thread_pool	utils/_thread_pool.h	/^    thread_pool_t *thread_pool;$/;"	m	struct:_thread_context_t
thread_pool_create	utils/_thread_pool.c	/^thread_pool_t *thread_pool_create(int size, thread_func_t func, void *data)$/;"	f
thread_pool_destroy	utils/_thread_pool.c	/^void thread_pool_destroy(thread_pool_t **thread_pool)$/;"	f
thread_pool_push_task	utils/_thread_pool.c	/^int thread_pool_push_task(thread_pool_t *thread_pool, void *data)$/;"	f
thread_pool_t	utils/_thread_pool.h	/^typedef struct _thread_pool_t thread_pool_t;$/;"	t	typeref:struct:_thread_pool_t
threads	utils/_thread_pool.h	/^    thread_context_t *threads; $/;"	m	struct:_thread_pool_t
time_add	utils/_time.c	/^void time_add(struct timeval *t1, int increment){$/;"	f
time_delta	utils/_time.c	/^int time_delta(struct timeval *t1, struct timeval *t2){$/;"	f
time_great	utils/_time.c	/^int time_great(struct timeval *t1, struct timeval *t2){$/;"	f
time_less	utils/_time.c	/^int time_less(struct timeval *t1, struct timeval *t2){$/;"	f
time_signed_delta	utils/_time.c	/^int time_signed_delta(struct timeval *t1, struct timeval *t2){$/;"	f
time_str	utils/_time.c	/^void time_str(char *time_buffer, int buffer_size){$/;"	f
time_str_by_time	utils/_time.c	/^void time_str_by_time(char *time_buffer, int buffer_size, time_t t){$/;"	f
time_subtract	utils/_time.c	/^void time_subtract(struct timeval *t1, int decrement){$/;"	f
trim_str	utils/_string.c	/^char* trim_str(char *str){$/;"	f
type	utils/_buffer.h	/^    int   type;                    \/* buffer存储的形式,是在文件还是内存 *\/$/;"	m	struct:_buffer_t
u_char	conhash/configure.h	/^typedef unsigned char u_char;$/;"	t
u_int	conhash/configure.h	/^typedef unsigned int u_int;$/;"	t
udp_client_create	utils/_network.c	/^int udp_client_create()$/;"	f
udp_server_create	utils/_network.c	/^int udp_server_create(int port)$/;"	f
udp_unix_socket_close	network/udp.c	/^void udp_unix_socket_close(int fd)$/;"	f
udp_unix_socket_create	network/udp.c	/^int udp_unix_socket_create(char *unix_path)$/;"	f
udp_unix_socket_recv	network/udp.c	/^int udp_unix_socket_recv(int fd, char *buffer, int size)$/;"	f
udp_unix_socket_send	network/udp.c	/^int udp_unix_socket_send(int fd, char *peer_path, char *buffer, int size)$/;"	f
uint32	crypt/3des.h	8;"	d
uint8	crypt/3des.h	4;"	d
unix_udp_client_create	utils/_network.c	/^int unix_udp_client_create()$/;"	f
unix_udp_server_create	utils/_network.c	/^int unix_udp_server_create(char *sock_path)$/;"	f
update_time	network/tcp_client.h	/^    struct timeval       update_time;         \/* stream上一次活跃的时间 *\/$/;"	m	struct:_tcp_client_stream_t	typeref:struct:_tcp_client_stream_t::timeval
update_time	network/tcp_server.h	/^    struct timeval  update_time;                \/* stream上一次活跃的时间 *\/$/;"	m	struct:_tcp_server_stream_t	typeref:struct:_tcp_server_stream_t::timeval
userfree	hashmap/hashmap.h	/^  void (*userfree)(void *);  $/;"	m	struct:_hashmap_t
userkey	hashmap/hashmap.h	/^  int          userkey;   \/* user owns the key *\/$/;"	m	struct:_hashmap_t
util_long	conhash/configure.h	/^typedef long util_long;$/;"	t
util_rbsubtree_max	conhash/util_rbtree.c	/^util_rbtree_node_t* util_rbsubtree_max(util_rbtree_node_t *node, util_rbtree_node_t *sentinel)$/;"	f
util_rbsubtree_min	conhash/util_rbtree.c	/^util_rbtree_node_t* util_rbsubtree_min(util_rbtree_node_t *node, util_rbtree_node_t *sentinel)$/;"	f
util_rbt_black	conhash/util_rbtree.h	31;"	d
util_rbt_isblack	conhash/util_rbtree.h	33;"	d
util_rbt_isred	conhash/util_rbtree.h	34;"	d
util_rbt_red	conhash/util_rbtree.h	32;"	d
util_rbtree_check	conhash/util_rbtree.c	/^int util_rbtree_check(const util_rbtree_t *rbtree, int *blackheight, int *maxdepth)$/;"	f
util_rbtree_delete	conhash/util_rbtree.c	/^void util_rbtree_delete(util_rbtree_t *rbtree, util_rbtree_node_t *node)$/;"	f
util_rbtree_init	conhash/util_rbtree.c	/^void util_rbtree_init(util_rbtree_t *rbtree)$/;"	f
util_rbtree_insert	conhash/util_rbtree.c	/^void util_rbtree_insert(util_rbtree_t *rbtree, util_rbtree_node_t *node)$/;"	f
util_rbtree_isempty	conhash/util_rbtree.h	44;"	d
util_rbtree_lookup	conhash/util_rbtree.c	/^util_rbtree_node_t* util_rbtree_lookup(util_rbtree_t *rbtree, long key)$/;"	f
util_rbtree_max	conhash/util_rbtree.h	56;"	d
util_rbtree_mid_travel	conhash/util_rbtree.c	/^void util_rbtree_mid_travel(util_rbtree_t *rbtree, $/;"	f
util_rbtree_min	conhash/util_rbtree.h	50;"	d
util_rbtree_node_s	conhash/util_rbtree.h	/^struct util_rbtree_node_s$/;"	s
util_rbtree_node_t	conhash/util_rbtree.h	/^typedef struct util_rbtree_node_s util_rbtree_node_t;$/;"	t	typeref:struct:util_rbtree_node_s
util_rbtree_s	conhash/util_rbtree.h	/^struct util_rbtree_s$/;"	s
util_rbtree_search	conhash/util_rbtree.c	/^util_rbtree_node_t* util_rbtree_search(util_rbtree_t *rbtree, long key)$/;"	f
util_rbtree_t	conhash/util_rbtree.h	/^typedef struct util_rbtree_s util_rbtree_t;$/;"	t	typeref:struct:util_rbtree_s
utils_lua	lua/utils_lua.c	/^const luaL_Reg utils_lua[] = $/;"	v
val	utils/_process_lock.c	/^    int val;                    \/*  value for SETVAL *\/$/;"	m	union:semun	file:
value	utils/_syslog.h	/^    int   value;$/;"	m	struct:_syslog_code_t
values	conhash/conhash_inter.h	/^    long *values;$/;"	m	struct:__get_vnodes_s
virtual_node_s	conhash/conhash_inter.h	/^struct virtual_node_s$/;"	s
vnode_tree	conhash/conhash_inter.h	/^	util_rbtree_t vnode_tree; \/* rbtree of virtual nodes *\/$/;"	m	struct:conhash_s
work_continue	utils/_thread_pool.h	/^    int            work_continue;$/;"	m	struct:_thread_context_t
zone_name	ip_zone/ip_zone.h	/^    char zone_name[MAX_ZONE_NAME_SIZE];$/;"	m	struct:_ip_zone_t
